parameters:
  - name: 'FolderName'
    type: string
    default: "./targetproject2"

  - name: 'ConnectionString'
    type: string
    default: "Data Source=127.0.0.1,5001;Initial Catalog=test;User ID=sa;Password=Strong_password_123!;Integrated Security=false;Trust Server Certificate=true"
  
  - name: 'TimeoutInMinutes'
    type: number
    default: 20

  - name: 'NugetConfigPath'
    type: string
    default: '$(System.DefaultWorkingDirectory)/nuget.config'

  - name: 'VmImage'
    type: string
    default: 'ubuntu-latest'

  - name: 'SolutionPath'
    type: string
    default: 'DbUp-POC.sln'

  - name: 'ProjectName'
    type: string
    default: 'TestProject'

  - name: 'TargetMachine'
    type: string
    default: '127.0.0.1,5985'
  
  - name: 'ArtifactFeedName'
    type: string
    default: 'DefaultFeed'

  - name: 'FeedPackageName'
    type: string
    default: 'dbupgrade'

jobs:
  - job: ArtifactPublish
    displayName: 'Publish artifact for ${{ parameters.ProjectName }}'
    timeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
    cancelTimeoutInMinutes: 2
    pool: MyPool
    steps:
      - checkout: self
        fetchDepth: 0

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet restore'
        inputs:
          command: 'restore'
          projects: |
            ${{ parameters.SolutionPath }}
          restoreArguments: '--locked-mode'
          feedsToUse: 'config'
          nugetConfigPath: '${{ parameters.NugetConfigPath }}'
          verbosityRestore: 'Minimal'

      - task: DotNetCoreCLI@2
        displayName: 'Build solution'
        inputs:
          command: 'build'
          projects: '${{ parameters.SolutionPath }}'

      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/DbUp-POC/bin/Debug/net8.0'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

      - task: UniversalPackages@0
        displayName: 'Publish Universal Package'
        inputs:
          command: publish
          publishDirectory: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          vstsFeedPublish: 'dbupgrade-poc/${{ parameters.ArtifactFeedName }}'
          vstsFeedPackagePublish: '${{ parameters.FeedPackageName }}'
          version: custom
          versionPublish: '$(package_version)'
          packagePublishDescription: 'Database updater of run ${Build.BuildId} run by ${Build.QueuedBy}.'

  - job: 'Database_Upgrade_${{ parameters.ProjectName }}'
    displayName: 'Database_Upgrade_${{ parameters.ProjectName }}'
    timeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
    dependsOn: ArtifactPublish
    cancelTimeoutInMinutes: 2
    pool: MyPool
    steps:
      - checkout: self
        fetchDepth: 0

      - task: UniversalPackages@0
        displayName: Download a Universal Package
        inputs:
          command: download
          vstsFeed: 'dbupgrade-poc/${{ parameters.ArtifactFeedName }}'
          vstsFeedPackage: '${{ parameters.FeedPackageName }}'
          vstsPackageVersion: '$(package_version)'
          downloadDirectory: '$(Build.SourcesDirectory)\someFolder'

      - task: CmdLine@2
        inputs:
          script: 'DbUp-POC.exe upgrade -c "${{ parameters.ConnectionString }}" -f "${{ parameters.FolderName }}"'
          workingDirectory: $(Build.SourcesDirectory)\someFolder'