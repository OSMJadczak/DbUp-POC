parameters:
  - name: 'FolderName'
    type: string
    default: "./targetproject2"

  - name: 'TimeoutInMinutes'
    type: number
    default: 20

  - name: 'NugetConfigPath'
    type: string
    default: '$(System.DefaultWorkingDirectory)/nuget.config'

  - name: 'VmImage'
    type: string
    default: 'ubuntu-latest'

  - name: 'SolutionPath'
    type: string
    default: 'DbUp-POC.sln'

  - name: 'ProjectName'
    type: string
    default: 'TestProject'
  
  - name: 'ArtifactFeedName'
    type: string
    default: 'DefaultFeed'

  - name: 'FeedPackageName'
    type: string
    default: 'dbupgrade'

  - name: 'DefaultPool'
    type: string
    default: 'MyPool'

  - name: 'QA1_VariableGroupName'
    type: string
    default: 'QA1-DatabaseUpgrade'
  
  - name: 'DEV1_VariableGroupName'
    type: string  
    default: 'DEV1-DatabaseUpgrade'

stages:
- stage: PublishArtifact
  pool: MyPool
  displayName: 'Publish artifact'
  jobs:
    - job: ArtifactPublish
      displayName: 'Publish artifact for ${{ parameters.ProjectName }}'
      timeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
      cancelTimeoutInMinutes: 2
      pool: MyPool
      steps:
        - checkout: self
          fetchDepth: 0

        - task: DotNetCoreCLI@2
          displayName: 'Dotnet restore'
          inputs:
            command: 'restore'
            projects: |
              ${{ parameters.SolutionPath }}
            restoreArguments: '--locked-mode'
            feedsToUse: 'config'
            nugetConfigPath: '${{ parameters.NugetConfigPath }}'
            verbosityRestore: 'Minimal'

        - task: DotNetCoreCLI@2
          displayName: 'Build solution'
          inputs:
            command: 'build'
            projects: '${{ parameters.SolutionPath }}'

        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/DbUp-POC/bin/Debug/net8.0'
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

        - task: UniversalPackages@0
          displayName: 'Publish Universal Package'
          inputs:
            command: publish
            publishDirectory: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            vstsFeedPublish: 'dbupgrade-poc/${{ parameters.ArtifactFeedName }}'
            vstsFeedPackagePublish: '${{ parameters.FeedPackageName }}'
            version: custom
            versionPublish: '$(package_version)'
            packagePublishDescription: 'Database updater of run ${Build.BuildId} run by ${Build.QueuedBy}.'
- stage: 'DEV1_DatabaseUpgrade'
  displayName: 'Upgrade dev1'
  dependsOn: 'PublishArtifact'
  jobs:
    - deployment: Deployment
      environment: 'DEV1'
      pool: $(PoolName)
      variables:
        - group: '${{ parameters.DEV1_VariableGroupName }}'
        - name: 'ConnectionString'
          value: $(ConnectionString)
        - name: 'PoolName'
          value: $(PoolName)
    - template: upgrade.yaml
      parameters:
        PoolName: $(PoolName)
        ConnectionString: $(ConnectionString)
        FolderName: '${{ parameters.FolderName }}'
        TimeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
        ArtifactFeedName: '${{ parameters.ArtifactFeedName }}'
        FeedPackageName: '${{ parameters.FeedPackageName }}'
        DisplayName: 'DEV1_Upgrade'
- stage: 'QA1_DatabaseUpgrade'
  displayName: 'Upgrade QA1'
  dependsOn: 'DEV1_DatabaseUpgrade'
  jobs:
    - deployment: Deployment
      environment: 'QA1'
      pool: $(PoolName)
      variables:
        - group: '${{ parameters.QA1_VariableGroupName }}'
        - name: 'ConnectionString'
          value: $(ConnectionString)
        - name: 'PoolName'
          value: $(PoolName)
    - template: upgrade.yaml
      parameters:
        PoolName: $(PoolName)
        ConnectionString: $(ConnectionString)
        FolderName: '${{ parameters.FolderName }}'
        TimeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
        ArtifactFeedName: '${{ parameters.ArtifactFeedName }}'
        FeedPackageName: '${{ parameters.FeedPackageName }}'
        DisplayName: 'QA1_Upgrade'
- stage: 'QA1_DatabaseClean'
  displayName: 'Cleanup of QA1 database'
  dependsOn: 'QA1_DatabaseUpgrade'
  jobs:
    - deployment: Deployment
      environment: 'QA1'
      pool: $(PoolName)
      variables:
        - group: '${{ parameters.QA1_VariableGroupName }}'
        - name: 'ConnectionString'
          value: $(ConnectionString)
        - name: 'PoolName'
          value: $(PoolName)
    - template: clean.yaml
      parameters:
        FolderName: '${{ parameters.FolderName }}'
        TimeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
        ArtifactFeedName: '${{ parameters.ArtifactFeedName }}'
        FeedPackageName: '${{ parameters.FeedPackageName }}'
        DisplayName: 'QA1_Clean'
- stage: 'DEV1_DatabaseClean'
  displayName: 'Cleanup of DEV1 database'
  dependsOn: 'DEV1_DatabaseUpgrade'
  jobs:
    - deployment: Deployment
      environment: 'DEV1'
      pool: $(PoolName)
      variables:
        - group: '${{ parameters.DEV1_VariableGroupName }}'
        - name: 'ConnectionString'
          value: $(ConnectionString)
        - name: 'PoolName'
          value: $(PoolName)
    - template: clean.yaml
      parameters:
        FolderName: '${{ parameters.FolderName }}'
        TimeoutInMinutes: '${{ parameters.TimeoutInMinutes }}'
        ArtifactFeedName: '${{ parameters.ArtifactFeedName }}'
        FeedPackageName: '${{ parameters.FeedPackageName }}'
        DisplayName: 'DEV1_Clean'